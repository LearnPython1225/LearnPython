{
    "0.6": {
        "title": "User Input",
        "des": "Handling user input is essential for creating interactive applications. Python's `input()` function makes it easy to take input from users.",
        "keypoint1": "The `input()` function captures user input as a string.",
        "keypoint2": "Input can be converted to other types, like integers or floats, to perform calculations or comparisons.",
        "keypoint3": "Handling input is crucial for personalized user experiences in applications.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\nuser_name = input(\"Please enter your name: \")\nprint(\"Hello,\", user_name + \"!\")\n\nuser_age = int(input(\"Please enter your age: \"))\nprint(\"You are\", user_age, \"years old.\")\n\nuser_height = float(input(\"Enter your height in meters: \"))\nprint(\"Your height is\", user_height, \"meters.\")",
        "task1": "Task 1: Write a Python program that asks the user to input their name using the <tt style='color:red;'>input()</tt> function and then prints a greeting message, e.g., <tt style='color:red;'>\"Hello, [Name]!\"</tt>.",
        "task2": "Task 2: Write a Python program that prompts the user to enter their age using the <tt style='color:red;'>input()</tt> function, converts it to an integer using <tt style='color:red;'>int()</tt>, and prints a message stating their age.",
        "stages": "0"
    },
    "0.32": {
        "title": "Read a File",
        "des": "Reading files is a common operation that involves opening a file to read its contents.",
        "keypoint1": "Python provides built-in functions like open() which can be used with the 'r' mode to read files.",
        "keypoint2": "The read(), readline(), and readlines() methods offer different ways to retrieve contents from a file.",
        "keypoint3": "Always ensure to close the file after reading or use a with statement to handle it automatically.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\n# Example 1: Reading the entire file content using read()\nwith open(\"example.txt\", \"r\") as file:  # Open the file in read mode\n    content = file.read()  # Read the entire file\n    print(\"File Content:\\n\", content)\n\n# Example 2: Reading file line by line using readline()\nwith open(\"example.txt\", \"r\") as file:\n    print(\"Reading line by line:\")\n    line = file.readline()  # Read the first line\n    while line:  # Continue until no more lines\n        print(line.strip())  # Print line without extra newlines\n        line = file.readline()  # Read the next line\n\n# Example 3: Reading all lines into a list using readlines()\nwith open(\"example.txt\", \"r\") as file:\n    lines = file.readlines()  # Read all lines into a list\n    print(\"Lines in the file:\", lines)\n\n# Example 4: Handling files safely using try-finally\ntry:\n    file = open(\"example.txt\", \"r\")\n    print(\"File Content:\\n\", file.read())\nfinally:\n    file.close()  # Ensure the file is closed even if an error occurs",
        "task1": "Read the first line of a file and print it.",
        "task2": "Read a file and print each line using a loop.",
        "stages": "0"
    },



    "1.31": {
        "title": "File Detection",
        "des": "Checking if a file or directory exists before performing operations prevents errors and ensures code reliability.",
        "keypoint1": "Use the os.path module to check for the existence of files and directories.",
        "keypoint2": "Common methods include os.path.exists() for checking the existence of a path.",
        "keypoint3": "os.path.isfile() and os.path.isdir() can be used to check if the path is a file or directory, respectively.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\nimport os\n\n# Example 1: Checking if a file or directory exists\npath = \"example.txt\"\nif os.path.exists(path):\n    print(f\"The path '{path}' exists.\")\nelse:\n    print(f\"The path '{path}' does not exist.\")\n\n# Example 2: Checking if a path is a file\nfile_path = \"example.txt\"\nif os.path.isfile(file_path):\n    print(f\"The path '{file_path}' is a file.\")\nelse:\n    print(f\"The path '{file_path}' is not a file.\")\n\n# Example 3: Checking if a path is a directory\ndirectory_path = \"example_folder\"\nif os.path.isdir(directory_path):\n    print(f\"The path '{directory_path}' is a directory.\")\nelse:\n    print(f\"The path '{directory_path}' is not a directory.\")\n\n# Example 4: Combining checks for robust file operations\npath = \"data.txt\"\nif os.path.exists(path) and os.path.isfile(path):\n    print(f\"Ready to perform operations on the file: {path}\")\nelse:\n    print(f\"The file '{path}' is missing or not a regular file.\")",
        "task1": "Write a script to check if a list of given file paths exist and determine if they are files or directories.",
        "task2": "Create a function that logs missing files from a list of required files in a specific directory.",
        "stages": "1"
    },
    "1.32": {
        "title": "Read a File",
        "des": "Reading files is a common operation that involves opening a file to read its contents.",
        "keypoint1": "Python provides built-in functions like open() which can be used with the 'r' mode to read files.",
        "keypoint2": "The read(), readline(), and readlines() methods offer different ways to retrieve contents from a file.",
        "keypoint3": "Always ensure to close the file after reading or use a with statement to handle it automatically.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\n# Example 1: Reading the entire file content using read()\nwith open(\"example.txt\", \"r\") as file:  # Open the file in read mode\n    content = file.read()  # Read the entire file\n    print(\"File Content:\\n\", content)\n\n# Example 2: Reading file line by line using readline()\nwith open(\"example.txt\", \"r\") as file:\n    print(\"Reading line by line:\")\n    line = file.readline()  # Read the first line\n    while line:  # Continue until no more lines\n        print(line.strip())  # Print line without extra newlines\n        line = file.readline()  # Read the next line\n\n# Example 3: Reading all lines into a list using readlines()\nwith open(\"example.txt\", \"r\") as file:\n    lines = file.readlines()  # Read all lines into a list\n    print(\"Lines in the file:\", lines)\n\n# Example 4: Handling files safely using try-finally\ntry:\n    file = open(\"example.txt\", \"r\")\n    print(\"File Content:\\n\", file.read())\nfinally:\n    file.close()  # Ensure the file is closed even if an error occurs",
        "task1": "Read the first line of a file and print it.",
        "task2": "Read a file and print each line using a loop.",
        "stages": "1"
    },
    "1.33": {
        "title": "Copy a File",
        "des": "Copying files involves creating a new file that has the same content as an existing file.",
        "keypoint1": "The shutil module offers a copy() function that can be used to copy the contents of a file.",
        "keypoint2": "Copying is especially useful for creating backups of important files.",
        "keypoint3": "Ensure that the destination directory exists and has the appropriate write permissions.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\nimport shutil\n\n# Example 1: Copying a file to the same directory with a new name\nsource = \"example.txt\"  # Source file\ndestination = \"example_copy.txt\"  # Destination file\nshutil.copy(source, destination)  # Copy the file\nprint(f\"File copied from {source} to {destination}\")\n\n# Example 2: Copying a file to a different directory\nsource = \"example.txt\"\ndestination = \"backup_folder/example_backup.txt\"\nshutil.copy(source, destination)  # Ensure the 'backup_folder' exists\nprint(f\"File copied from {source} to {destination}\")\n\n# Example 3: Using shutil.copy2() to preserve metadata\nsource = \"example.txt\"\ndestination = \"example_with_metadata_copy.txt\"\nshutil.copy2(source, destination)  # Copies the file along with metadata\nprint(f\"File with metadata copied from {source} to {destination}\")",
        "task1": "Copy a file from one directory to another and verify the copy.",
        "task2": "Copy multiple files from a list to a backup directory.",
        "stages": "1"
    },
    "1.34": {
        "title": "Write to a File",
        "des": "Writing to files is essential for outputting data to a file for storage or further use.",
        "keypoint1": "Open a file using the 'w' mode to write text or 'wb' for binary data.",
        "keypoint2": "The write() function writes the string to the file, overwriting any existing content.",
        "keypoint3": "To append to a file instead of overwriting, use the 'a' mode.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\n# Example 1: Writing to a file using 'w' mode\nwith open(\"output.txt\", \"w\") as file:  # Open the file in write mode\n    file.write(\"Hello, this is a new file!\\n\")\n    file.write(\"Writing to a file overwrites existing content.\\n\")\n\nprint(\"File has been written using 'w' mode.\")\n\n# Example 2: Appending to a file using 'a' mode\nwith open(\"output.txt\", \"a\") as file:  # Open the file in append mode\n    file.write(\"Appending this line without overwriting the existing content.\\n\")\n\nprint(\"File has been updated using 'a' mode.\")\n\n# Example 3: Writing multiple lines to a file\nlines = [\"Line 1: Writing multiple lines.\\n\", \"Line 2: Each line is written separately.\\n\"]\nwith open(\"output.txt\", \"w\") as file:  # Open in write mode to overwrite\n    file.writelines(lines)  # Write multiple lines at once\n\nprint(\"Multiple lines have been written to the file.\")",
        "task1": "Write a series of numbers to a file, each on a new line.",
        "task2": "Append a timestamp to an existing log file every time a script is run.",
        "stages": "1"
    },
    "1.35": {
        "title": "Move a File",
        "des": "Moving a file involves changing its directory or renaming the file within the same directory.",
        "keypoint1": "The shutil.move() function is used for moving files and provides functionality similar to the UNIX mv command.",
        "keypoint2": "Moving files can also be done using os.rename() for renaming or moving within the same filesystem.",
        "keypoint3": "Consider file permissions and existing file handling when moving files.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\nimport shutil\nimport os\n\n# Example 1: Moving a file to a different directory\nsource = \"example.txt\"  # Source file\ndestination = \"backup_folder/example.txt\"  # Destination location\nshutil.move(source, destination)  # Move the file\nprint(f\"File moved from {source} to {destination}\")\n\n# Example 2: Renaming a file within the same directory\nsource = \"example_renamed.txt\"\nos.rename(destination, source)  # Rename the file\nprint(f\"File renamed from {destination} to {source}\")\n\n# Example 3: Handling existing files during a move\nsource = \"data.txt\"\ndestination = \"archive_folder/data.txt\"\n\ntry:\n    shutil.move(source, destination)  # Attempt to move the file\n    print(f\"File moved successfully from {source} to {destination}\")\nexcept FileNotFoundError:\n    print(f\"Source file '{source}' does not exist.\")\nexcept PermissionError:\n    print(f\"Permission denied for moving '{source}'.\")",
        "task1": "Move a list of files to a new directory and check if they exist in the new location.",
        "task2": "Rename a batch of files in a directory based on a naming pattern.",
        "stages": "1"
    },
    "1.36": {
        "title": "Delete a File",
        "des": "Deleting files involves removing them from the filesystem, which is an irreversible operation that should be handled with caution.",
        "keypoint1": "The os.remove() function can be used to delete a file.",
        "keypoint2": "Always perform checks to ensure the file exists before attempting to delete it to avoid errors.",
        "keypoint3": "Consider implementing a trash or undo feature for safer file deletion operations in applications.",
        "keypoint4": "-",
        "keypoint5": "-",
        "keypoint6": "-",
        "example": "\nimport os\n\n# Example 1: Deleting a file safely\nfile_to_delete = \"example.txt\"\n\nif os.path.exists(file_to_delete):  # Check if the file exists\n    os.remove(file_to_delete)  # Delete the file\n    print(f\"File '{file_to_delete}' has been deleted.\")\nelse:\n    print(f\"File '{file_to_delete}' does not exist.\")\n\n# Example 2: Error handling during file deletion\ntry:\n    file_to_delete = \"data.txt\"\n    os.remove(file_to_delete)  # Attempt to delete the file\n    print(f\"File '{file_to_delete}' has been deleted.\")\nexcept FileNotFoundError:\n    print(f\"File '{file_to_delete}' not found.\")\nexcept PermissionError:\n    print(f\"Permission denied for deleting '{file_to_delete}'.\")\n\n# Example 3: Logging deletions for safer operations\nfile_to_delete = \"log.txt\"\n\nif os.path.exists(file_to_delete):\n    print(f\"Deleting file: {file_to_delete}\")\n    os.remove(file_to_delete)  # Delete the file\n    print(f\"File '{file_to_delete}' successfully deleted.\")\nelse:\n    print(f\"File '{file_to_delete}' not found, deletion skipped.\")",
        "task1": "Delete a specific file if it exists and log the action.",
        "task2": "Scan a directory and delete files that are older than a certain date.",
        "stages": "1"
    },





    "2.1": {
    "title": "Introduction to Turtle Graphics",
    "des": "Learn the basics of the Turtle module, including setting up the environment and managing the turtle’s visibility.",
    "keypoint1": "<tt>import turtle</tt> - This command imports the turtle module, enabling you to use its functions.",
    "keypoint2": "<tt>turtle.showturtle()</tt> - Displays the turtle icon on the screen.",
    "keypoint3": "<tt>turtle.hideturtle()</tt> - Hides the turtle icon from the screen while still allowing movement.",
    "keypoint4": "<tt>turtle.done()</tt> - Keeps the turtle graphics window open until you manually close it.",
    "keypoint5": "-",
    "keypoint6": "-",
    "example": "\nimport turtle\n\n# Set up turtle\nturtle.showturtle()\nturtle.speed('slow')\n\n# Draw a simple line\nturtle.forward(100)\nturtle.done()\n```",
    "task1": "Write a Python script to display the turtle on the screen, make it move forward by 100 units, and then hide the turtle.",
    "task2": "Use <tt>turtle.position()</tt> to print the turtle's current position after moving forward.",
    "stages": "2"
    },

    "2.2": {
    "title": "Basic Turtle Operations",
    "des": "Learn how to control the turtle's movement, position, and speed to create basic drawings.",
    "keypoint1": "<tt>turtle.position()</tt> - Returns the current position of the turtle as (x, y) coordinates.",
    "keypoint2": "<tt>turtle.forward(distance)</tt> - Moves the turtle forward by the specified distance.",
    "keypoint3": "<tt>turtle.right(angle)</tt> - Rotates the turtle to the right by the specified angle.",
    "keypoint4": "<tt>turtle.left(angle)</tt> - Rotates the turtle to the left by the specified angle.",
    "keypoint5": "<tt>turtle.goto(x, y)</tt> - Moves the turtle to the specified (x, y) position.",
    "keypoint6": "<tt>turtle.speed(speed)</tt> - Sets the turtle's speed, where 0 is the fastest, and 1-10 are gradual speeds.",
    "example": "\nimport turtle\n\n# Set up turtle\nturtle.showturtle()\nturtle.speed(3)\n\n# Move the turtle forward\nturtle.forward(100)\n\n# Turn the turtle\nturtle.right(90)\nturtle.forward(50)\n\n# Go to a specific position\nturtle.goto(-50, 50)\n\n# Print current position\nprint(turtle.position())\n\nturtle.done()\n```",
    "task1": "Write a Python script to move the turtle in a square pattern (100 units per side).",
    "task2": "Write a Python script to move the turtle to specific coordinates (e.g., (50, 50)) and print its position.",
    "stages": "2"
    },

    "2.3": {
    "title": "Drawing and Filling Shapes",
    "des": "Learn how to use the Turtle module to draw basic shapes and fill them with color.",
    "keypoint1": "<tt>turtle.circle(radius)</tt> - Draws a circle with the specified radius.",
    "keypoint2": "<tt>turtle.penup()</tt> - Lifts the pen, so the turtle moves without drawing.",
    "keypoint3": "<tt>turtle.pendown()</tt> - Puts the pen down, so the turtle draws as it moves.",
    "keypoint4": "<tt>turtle.color(color)</tt> - Sets the pen and fill color. Accepts color names (e.g., 'red') or RGB values.",
    "keypoint5": "<tt>turtle.begin_fill()</tt> - Marks the starting point for a filled shape.",
    "keypoint6": "<tt>turtle.end_fill()</tt> - Marks the endpoint and fills the shape drawn since <tt>begin_fill()</tt>.",
    "example": "\nimport turtle\n\n# Set up turtle\nturtle.speed(3)\n\n# Draw a circle\nturtle.color('blue')\nturtle.circle(50)\n\n# Draw and fill a rectangle\nturtle.penup()\nturtle.goto(-100, -50)\nturtle.pendown()\nturtle.color('red')\nturtle.begin_fill()\nfor _ in range(2):\n    turtle.forward(100)\n    turtle.left(90)\n    turtle.forward(50)\n    turtle.left(90)\nturtle.end_fill()\n\nturtle.done()\n```",
    "task1": "Draw and fill a triangle with the color green.",
    "task2": "Use <tt>turtle.penup()</tt> and <tt>turtle.pendown()</tt> to draw two non-overlapping circles of different colors.",
    "stages": "2"
    },

    "2.4": {
    "title": "Drawing Complex Patterns",
    "des": "Learn how to use loops and advanced Turtle commands to create complex and repetitive patterns.",
    "keypoint1": "<tt>for</tt> loops - Use loops to repeat drawing commands and create patterns efficiently.",
    "keypoint2": "<tt>turtle.circle(radius, extent)</tt> - Draws a partial circle or arc by specifying an extent (in degrees).",
    "keypoint3": "<tt>turtle.goto(x, y)</tt> - Moves the turtle to specific coordinates, helping to reposition for patterns.",
    "keypoint4": "<tt>turtle.right(angle)</tt> and <tt>turtle.left(angle)</tt> - Rotate the turtle at specific angles to create symmetrical designs.",
    "keypoint5": "-",
    "keypoint6": "-",
    "example": "\nimport turtle\n\n# Set up turtle\nturtle.speed(0)  # Fastest speed\n\n# Draw a star pattern\nfor _ in range(36):\n    turtle.color('purple')\n    turtle.forward(100)\n    turtle.right(144)  # Star angle\n    turtle.forward(100)\n    turtle.right(144)  # Return to start\n    turtle.right(10)   # Rotate for next star\n\n# Draw a circular pattern\nfor _ in range(12):\n    turtle.color('blue')\n    turtle.circle(50)\n    turtle.right(30)\n\nturtle.done()\n```",
    "task1": "Write a script to draw a flower-like pattern using multiple overlapping circles of different colors.",
    "task2": "Use loops and <tt>turtle.circle()</tt> to draw a spiral pattern that gradually increases in size.",
    "stages": "2"
    },

    "2.5": {
    "title": "Screen and Event Controls",
    "des": "Learn how to control the turtle graphics screen and handle user events like key presses and mouse clicks.",
    "keypoint1": "<tt>turtle.listen()</tt> - Puts the turtle screen in 'listening mode', allowing it to detect user inputs.",
    "keypoint2": "<tt>turtle.onkey(function, key)</tt> - Binds a specific function to a key press event. For example, pressing 'w' can move the turtle forward.",
    "keypoint3": "<tt>turtle.onclick(function)</tt> - Binds a function to mouse click events on the turtle screen.",
    "keypoint4": "-",
    "keypoint5": "-",
    "keypoint6": "-",
    "example": "\nimport turtle\n\n# Define functions for key controls\ndef move_forward():\n    turtle.forward(50)\n\ndef move_backward():\n    turtle.backward(50)\n\ndef turn_left():\n    turtle.left(30)\n\ndef turn_right():\n    turtle.right(30)\n\n# Set up turtle\nturtle.speed(3)\nturtle.shape('turtle')\n\n# Listen for key presses\nturtle.listen()\nturtle.onkey(move_forward, 'w')\nturtle.onkey(move_backward, 's')\nturtle.onkey(turn_left, 'a')\nturtle.onkey(turn_right, 'd')\n\n# Keep the window open\nturtle.done()\n```",
    "task1": "Write a Python script to control the turtle using the arrow keys (up, down, left, right) and print its position on each move.",
    "task2": "Write a Python script to change the turtle's color whenever the user clicks on the screen.",
    "stages": "2"
}



}